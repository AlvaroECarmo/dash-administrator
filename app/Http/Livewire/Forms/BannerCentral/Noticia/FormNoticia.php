<?php

namespace App\Http\Livewire\Forms\BannerCentral\Noticia;

use App\Models\GetJSON;
use App\Models\NTUploadImage;
use App\Models\Parlamento\Blogpag;
use App\Models\Parlamento\LinkFiles;
use App\Models\Traits\UploadImagen;
use Illuminate\Support\Facades\Validator;
use Livewire\TemporaryUploadedFile;


class FormNoticia extends NTUploadImage
{
    use UploadImagen;
    use GetJSON;

    public $photo;
    public $data = ['id' => 0, 'anexo1' => null, 'anexo2' => null, 'anexo3' => null];
    public $bannerCentralNoticias;
    protected $listeners = ['alterarNoticias'];
    public $image;
    public $imageEditada;

    public function mount()
    {
        $this->bannerCentralNoticias = $this->parseEncode('bannercentralnoticias.json');

    }

    public function render()
    {
        return view('livewire.forms.banner-central.noticia.form-noticia');
    }

    public function saveInfo()
    {

        if (!$this->data['id']) {
            $this->validateImage();
        }
        try {
            $temp_image = $this->photo ? $this->photo->temporaryUrl() : ($this->image ?? null);
            $temporal = null;
            if (!$this->data['id']) {
                $logs = Blogpag::create([
                    'img' => $this->photo->store('notices/imagens', 'public'),
                    'p' => $this->data['description'],
                    'context' => $this->data['h1'],
                    'destaque' => $this->data['p'],
                    'user_id' => auth()->user()->id,
                    'dataEvento' => \Date::parse($this->data['dataAcontecimento'])->format('Y-m-d H:i.s'),
                ]);
            } else {
                $temporal = Blogpag::where('id', $this->data['id'])
                    ->first();
                $temporal->update([
                    'p' => $this->data['description'],
                    'context' => $this->data['h1'],
                    'destaque' => $this->data['p'],
                    'dataEvento' => \Date::parse($this->data['dataAcontecimento'])->format('Y-m-d H:i.s'),
                    'user_id' => auth()->user()->id
                ]);

                if ($this->photo !== null) {
                    $temporal->update(['img' => $this->photo->store('notices/imagens', 'public')]);
                }
            }


            $this->data['anexo1'] ? LinkFiles::saveAnexo($this->data['anexo1'], $logs->toArray()) : null;
            $this->data['anexo2'] ? LinkFiles::saveAnexo($this->data['anexo2'], $logs->toArray()) : null;
            $this->data['anexo3'] ? LinkFiles::saveAnexo($this->data['anexo3'], $logs->toArray()) : null;

            $this->dispatchBrowserEvent('success-send', ['message' => 'A noticia foi registrada com sucesso!']);

            $this->emit('sendSucess');
            $this->data = ['id' => 0, 'anexo1' => null, 'anexo2' => null, 'anexo3' => null];
            $this->image = null;
            $this->dispatchBrowserEvent('editorEditingNoticia', ['description' => '']);
            $this->render();

        } catch (\Exception $d) {
            $this->dispatchBrowserEvent('errorEvernt', ['message' => 'NÃ£o foi adcionado a imagem!']);
        }


    }


    /**
     *
     */
    public function alterarNoticias($attr)
    {

        $this->data['id'] = $attr['id'];
        $this->data['h1'] = $attr['context'];
        $this->data['p'] = $attr['destaque'];
        $this->data['dataEvento'] = __(($attr['dataEvento'] ? \Date::parse($attr['dataEvento'])->format('d-m-Y H:i') : null) ?? ($attr['created_at'] ? \Date::parse($attr['created_at'])->format('d-m-Y H:i') : null));
        $this->dispatchBrowserEvent('editorEditingNoticia', ['description' => $attr['p']]);

        $this->image = \Storage::url($attr['img']);
        $this->dispatchBrowserEvent('activeFunctionality', ['temp_image' => \Storage::url($attr['img'])]);

        $this->dispatchBrowserEvent('windoLocationNoticie');


    }

    /*  public function updatedPhoto()
      {
          parent::updatedPhoto(); // TODO: Change the autogenerated stub
          $this->image = $this->photo->temporaryUrl();
      }
    */

    public function updatedImageEditada()
    {
        $this->photo = new TemporaryUploadedFile($this->imageEditada, 'local');
        $this->image = $this->photo->temporaryUrl();
        $this->dispatchBrowserEvent('activeFunctionality', ['temp_image' => $this->photo->temporaryUrl()]);

    }

    public function alterarImagem()
    {
        $file = \Storage::files($this->image, true);
        $this->dispatchBrowserEvent('setFileDocumento', ['file' => '$file$file']);
    }

    public function removeImage()
    {
        parent::removeImage(); // TODO: Change the autogenerated stub
        $this->image = null;
    }


    private function validateImage()
    {

        $infors = $this->photo?->temporaryUrl();
        $validado = Validator::make([
            "photo" => $infors
        ], [
            'photo' => 'required',

        ])->setCustomMessages([
            'photo.required' => 'Ã‰ importante que adiciones uma foto de capa para a imagem...',
        ]);


        if ($validado->fails()) {
            $this->dispatchBrowserEvent('show-fails', ['message' => $validado->getMessageBag()->first()]);
            $validado->validate();
        }

    }

}
